unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, math, Menus, ActnList, Punkt_in_Polygon, G_3D,
  ComCtrls;

type
  TForm1 = class(TForm)
    PaintBox1: TPaintBox;
    Button1: TButton;
    Label1: TLabel;
    Edit1: TEdit;
    Label2: TLabel;
    Edit2: TEdit;
    Button2: TButton;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    MainMenu1: TMainMenu;
    vkbdfv1: TMenuItem;
    Hilfe1: TMenuItem;
    Button3: TButton;
    Label6: TLabel;
    GroupBox1: TGroupBox;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    RadioGroup1: TRadioGroup;
    RadioGroup2: TRadioGroup;
    procedure Button2Click(Sender: TObject);
    procedure PaintBox1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure PaintBox1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure PaintBox1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure FormCreate(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure Button1Click(Sender: TObject);
    procedure FormPaint(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure vkbdfv1Click(Sender: TObject);
    procedure Hilfe1Click(Sender: TObject);

  private
  public
    procedure koordinatensys;
  end;

  RPunktspezifisches = record
    x,y,z:real;
  end;

  RLinienpunkte = record
    p: array[1..2] of word;
    sehbar: boolean;
  end;

  Arraytyp= array[0..2] of word;               //ging leider nicht anders


  TPunkt = object
    l,index:integer;        //l= Laenge der Arrays
    k_mx,k_my,k_mz:real;    //Koordinaten des Koerpermittelpunkts
    A: array of RPunktspezifisches; //speichert die EckPunkte des Körpers
    Linien: array of RLinienpunkte; //speichert die Kanten des Körpers
    Zeichenflaechepunkte: array of TPoint;  //speichert die auf den Bildschirm projizierten Werte
    function sichtbar(const Linie1, Linie2: word): boolean;  // findet heraus, ob eine Fläche sichtbar ist
    procedure aender_koordinaten(punktname:word; x_n,y_n,z_n:integer);
    procedure Farbe(const Linie1, Linie2: word; Farb: TColor);  //färbt eine Fläche
    procedure Laenge_Nullsetzen;
    procedure lagenberechner(var x,y,z:real); //berechnet die - durch Drehung entstandene - neue Lage der Punkte
    procedure Linienpunktzufueg(b,e: word);
    procedure Mittelpunktberechnung(b:arraytyp; var my,mz: real); //berechnet den Mittelpunkt einer Fläche
    procedure Punkteausgeben(var b: array of Rpunktspezifisches); //übergibt Punkte des Körpers an ein Array
    procedure Verschieben(dif:integer; Achse:word); //verändert alle Punkte bezüglich der angegebenen Koordinate um einen konstanten Wert
    procedure zufueg(init_x,init_y,init_z:integer); //Fügt dem Array A einen Punkt hinzu
    procedure zeichne_Linie(Linie: RLinienpunkte);  //Fügt dem Linienarray einen Punkt hinzu
    destructor zerstoer;
  end;

//spezielle Körper
TQuader = object(TPunkt)
  public
    constructor init(t,b,h,x_n,y_n,z_n:integer);
    procedure Berechnung;
    procedure Vorfestlegungen;
    procedure zeichnen;
  end;

TPyramide = object(TPunkt)
  public
    constructor init(n,h,s,f1,f2,f3:integer);
    procedure Berechnung;
    procedure Vorfestlegungen;
    procedure zeichnen;
  end;

//vorher genannte Prozeduren
  procedure setze(P: TPoint);
  procedure malzu(P: TPoint);
  function kor_y(y: real):real;
  function kor_z(z: real):real;



const zoomfaktor=1;
      pi=3.14159265;
var
  Form1: TForm1;
  Quader: TQuader;
  Pyramide: TPyramide;
  Virt_Bild: TBitmap;
  Mausaktion: set of 1..10;
  alpha, beta, gamma: real;
  maushoch: boolean;
  xa, ya, c: integer;

implementation

uses Unit2, Unit3;

{$R *.dfm}
//####################################################################################################
//- - - - - - - - - - - - - - - - - - - - - METHODEN VON TPUNKT - - - - - - - - - - - - - - - - - - -
//####################################################################################################

function TPunkt.sichtbar(const Linie1, Linie2: word): boolean;
var x,y,z:array[0..2] of real;
    i:integer;
    punkt_1, punkt_2, punkt_3:word;
    orientierung:real;
begin
  punkt_1:=Linien[Linie1].p[1]; punkt_2:=Linien[Linie1].p[2]; punkt_3:=Linien[Linie2].p[2];
  if ((punkt_3=punkt_1)or(punkt_3=punkt_2)) then punkt_3:=Linien[Linie2].p[1];
  x[0]:=A[punkt_2].x-A[punkt_1].x;      x[1]:=A[punkt_3].x-A[punkt_1].x; //Vektoren von punkt_1 zu punkt_2 und punkt_3
  y[0]:=A[punkt_2].y-A[punkt_1].y;      y[1]:=A[punkt_3].y-A[punkt_1].y;
  z[0]:=A[punkt_2].z-A[punkt_1].z;      z[1]:=A[punkt_3].z-A[punkt_1].z;
  x[2]:=y[0]*z[1]-z[0]*y[1];         //Kreuzprodukt der beiden Vektoren bilden (Normalenvektor der Ebene)
  y[2]:=z[0]*x[1]-x[0]*z[1];
  z[2]:=x[0]*y[1]-y[0]*x[1];
  orientierung:= (k_mx-A[punkt_1].x)*x[2]+(k_my-A[punkt_1].y)*y[2]+(k_mz-A[punkt_1].z)*z[2];  //es wird herausgefunden, ob normalvektor nach refpunkt orientiert ist (leitet sich aus Abstandsberechnungsformel ab)
  if orientierung<0 then begin                                                                                            //Normalenvektor wird in Richtung des refpunkts orientiert
    x[2]:=-x[2]; y[2]:=-y[2]; z[2]:=-z[2];
  end;
  orientierung:=x[2]*(-A[punkt_1].x)+y[2]*(-A[punkt_1].y)+z[2]*(-A[punkt_1].z);
  if orientierung<0 then  begin                                                   //wenn der refpunkt nicht in der gleichen richtung wie der zuschauerpunkt liegt, so ist die fläche sichtbar
    Linien[Linie1].sehbar:=true; Linien[Linie2].sehbar:=true;
    sichtbar:= true;
    end
    else begin sichtbar:= false;  end;
end;

procedure TPunkt.aender_koordinaten(punktname:word; x_n,y_n,z_n:integer);
  begin
    A[punktname].x:=x_n; A[punktname].y:=y_n; A[punktname].z:=z_n;
  end;

procedure TPunkt.Farbe(const Linie1, Linie2: word; Farb: TColor);
var i:integer;
    my,mz:real;
    b:arraytyp;
begin
  if Linien[Linie1].sehbar and Linien[Linie2].sehbar then
    begin
    b[0]:=Linien[Linie1].p[1]; b[1]:=Linien[Linie1].p[2]; b[2]:=Linien[Linie2].p[2];
    if ((b[0]=Linien[Linie2].p[2])or(b[1]=Linien[Linie2].p[2])) then b[2]:=Linien[Linie2].p[1];
    Mittelpunktberechnung(b,my,mz);
    Virt_Bild.Canvas.Brush.Color:=Farb;
    if Virt_Bild.Canvas.Pixels[round(my),round(mz)]<>clblack then
      Virt_Bild.Canvas.FloodFill(round(my),round(mz),clblack,fsborder);
    end;
end;

procedure TPunkt.lagenberechner(var x,y,z:real);             //berechnet die Koordinaten des gedrehten Punktes
var xalt,yalt,zalt,Ax,Ay,Az:real;
    i:integer;
    b:array of word;
begin
  if form1.radiogroup1.ItemIndex=0 then
  begin
    xalt:=x-c;                                          //Rotation um y-Achse
      x:=cos(alpha)*(xalt)+sin(alpha)*z;
      z:=cos(alpha)*z-sin(alpha)*xalt;
    xalt:=x;                                        //Rotation um z-Achse
      x:=cos(beta)*xalt-sin(beta)*y+c;
      y:=cos(beta)*y+sin(beta)*xalt;
    yalt:=y;
      y:=cos(gamma)*yalt+sin(gamma)*z;                 //Rotation um x-Achse
      z:=cos(gamma)*z-sin(gamma)*yalt;
    if x=0 then x:=0.000001;
  end;
  if form1.radiogroup1.ItemIndex=1 then
  begin
    xalt:=x-k_mx;
    zalt:=z-k_mz;                                          //Rotation um y-Achse
      x:=cos(alpha)*(xalt)+sin(alpha)*zalt;
      z:=cos(alpha)*zalt-sin(alpha)*xalt;
    xalt:=x;
    yalt:=y-k_my;                                        //Rotation um z-Achse
      x:=cos(beta)*xalt-sin(beta)*yalt+k_mx;
      y:=cos(beta)*yalt+sin(beta)*xalt;
    yalt:=y;
    zalt:=z;
      y:=cos(gamma)*yalt+sin(gamma)*zalt+k_my;                 //Rotation um x-Achse
      z:=cos(gamma)*zalt-sin(gamma)*yalt+k_mz;
    if x=0 then x:=0.000001;
  end;
end;

procedure TPunkt.Laenge_Nullsetzen;
begin  l:=0; end;

procedure TPunkt.Linienpunktzufueg(b,e: word);
begin
  index:=index+1; setlength(Linien,index+1); Linien[index].p[1]:=b; Linien[index].p[2]:=e;  Linien[index].sehbar:=false;
end;

procedure TPunkt.Mittelpunktberechnung(b:arraytyp; var my,mz: real);
var i:integer;
begin
  my:=0; mz:=0;
  for i:=0 to 2 do
    begin
      my:=my+Zeichenflaechepunkte[b[i]].x; mz:=mz+Zeichenflaechepunkte[b[i]].y;
    end;
  my:=my/3; mz:=mz/3;                                                  //arithmetisches Mittel
end;

procedure TPunkt.Punkteausgeben(var b: array of Rpunktspezifisches);
var i:integer;
begin
  for i:=1 to l do
    begin
      b[i].x:=A[i].x-c; b[i].y:=A[i].y; b[i].z:=A[i].z;
    end;
  end;

procedure TPunkt.Verschieben(dif:integer; Achse:word);
var i:integer;
begin
  for i:= 0 to high(A) do begin
    if Achse=1 then A[i].x:=A[i].x+dif;                            //Achse 1=x-Achse usw.
    if Achse=2 then A[i].y:=A[i].y+dif;
    if Achse=3 then A[i].z:=A[i].z+dif;
  end;
end;

procedure TPunkt.zufueg(init_x,init_y,init_z:integer);
  begin
    l:=l+1;
    setlength(A,l+1);
    setlength(Zeichenflaechepunkte,l+1);
    A[l].x:=init_x; A[l].y:=init_y; A[l].z:=init_z;
  end;

procedure TPunkt.zeichne_Linie(Linie: RLinienpunkte);
  begin
    if Linie.sehbar then Virt_Bild.Canvas.Pen.Style:=psSolid    //durchgezogene Linie
    else Virt_Bild.Canvas.Pen.Style:=psDot;                                                           //gepunktete Linie
    setze(Zeichenflaechepunkte[Linie.p[1]]);
    malzu(Zeichenflaechepunkte[Linie.p[2]]);
  end;

destructor TPunkt.zerstoer;
begin
end;



//####################################################################################################
//- - - - - - - - - - - - - - - - - - - - - SPEZIELLE KÖRPER - - - - - - - - - - - - - - - - - - - - -
//####################################################################################################

//--------------------------------------------Quader--------------------------------------------------

constructor TQuader.init(t,b,h,x_n,y_n,z_n:integer);
begin
  setlength(Zeichenflaechepunkte,9);
  x_n:=x_n+c;
  zufueg(x_n,y_n,z_n); zufueg(x_n,y_n,z_n+h); zufueg(x_n,y_n+b,z_n); zufueg(x_n,y_n+b,z_n+h);
  zufueg(x_n+t,y_n,z_n); zufueg(x_n+t,y_n,z_n+h); zufueg(x_n+t,y_n+b,z_n); zufueg(x_n+t,y_n+b,z_n+h);
  Vorfestlegungen;form1.Label7.Caption:=inttostr(l);
  Berechnung;
end;

procedure TQuader.Berechnung;
var j,i:integer;
begin
  k_mx:=0; k_my:=0; k_mz:=0;
  k_mx:=(A[1].x+A[8].x)/2; k_my:=(A[1].y+A[8].y)/2; k_mz:=(A[1].z+A[8].z)/2; //arithmetisches Mittel einer Diagonale
  for j:=1 to 8 do
  begin
    lagenberechner(A[j].x,A[j].y,A[j].z);
    Zeichenflaechepunkte[j].x:=round(kor_y(A[j].y*zoomfaktor/A[j].x));
    Zeichenflaechepunkte[j].y:=round(kor_z(A[j].z*zoomfaktor/A[j].x));
  end;
end;

procedure TQuader.Vorfestlegungen;
begin
  index:=0;
  setlength(Linien,13);
  Linienpunktzufueg(1,2); Linienpunktzufueg(1,3); Linienpunktzufueg(1,5);
  Linienpunktzufueg(2,4); Linienpunktzufueg(2,6);
  Linienpunktzufueg(3,4); Linienpunktzufueg(3,7);
  Linienpunktzufueg(4,8);
  Linienpunktzufueg(5,6); Linienpunktzufueg(5,7);
  Linienpunktzufueg(6,8);
  Linienpunktzufueg(7,8);
end;

procedure TQuader.zeichnen;
var i:integer;
begin
  for i:=1 to high(linien) do Linien[i].sehbar:=false;
  if TPunkt.sichtbar(1,2) then begin Linien[4].sehbar:=true; Linien[6].sehbar:=true; end;   //x_n-Ebene
  if TPunkt.sichtbar(9,10) then begin Linien[12].sehbar:=true; Linien[11].sehbar:=true;end;   //x_n+t-Ebene
  if TPunkt.sichtbar(1,3) then begin Linien[9].sehbar:=true; Linien[5].sehbar:=true; end;   //y_n-Ebene
  if TPunkt.sichtbar(6,7) then begin Linien[12].sehbar:=true; Linien[8].sehbar:=true; end;   //y_n+b-Ebene
  if TPunkt.sichtbar(2,3) then begin Linien[10].sehbar:=true; Linien[7].sehbar:=true; end;   //z_n-Ebene
  if TPunkt.sichtbar(4,5) then begin Linien[11].sehbar:=true; Linien[8].sehbar:=true; end;   //z_n+h-Ebene
  for i:=1 to 12 do
    if Linien[i].sehbar then TPunkt.zeichne_Linie(Linien[i]);         //damit richtige flächen auf jeden Fall gefärbt werden(und nicht der Mittelpunkt auf einer gestrichelten Linie is)
  if form2.CheckBox2.Checked=true then begin
    if (Linien[4].sehbar and Linien[6].sehbar) then Farbe(1,2,form2.ColorDialog1.color);
    if (Linien[12].sehbar and Linien[11].sehbar) then Farbe(9,10,form2.ColorDialog2.color);
    if (Linien[9].sehbar and Linien[5].sehbar) then Farbe(1,3,form2.ColorDialog3.color);
    if (Linien[12].sehbar and Linien[8].sehbar) then Farbe(6,7,form2.ColorDialog4.color);
    if (Linien[10].sehbar and Linien[7].sehbar) then Farbe(2,3,form2.ColorDialog5.color);
    if (Linien[11].sehbar and Linien[8].sehbar) then Farbe(4,5,form2.ColorDialog6.color);
  end;
  if form2.CheckBox1.Checked=true then begin
    for i:=1 to 12 do
      if Linien[i].sehbar=false then TPunkt.zeichne_Linie(Linien[i]);
  end;
  if (form2.CheckBox2.Checked=true)and(form2.CheckBox1.Checked=true) then begin
    for i:=1 to 12 do
      if Linien[i].sehbar then TPunkt.zeichne_Linie(Linien[i]);
    if (Linien[4].sehbar and Linien[6].sehbar) then Farbe(1,2,form2.ColorDialog1.color);             //damit die gepunktete Linie nicht grau bleibt
    if (Linien[12].sehbar and Linien[11].sehbar) then Farbe(9,10,form2.ColorDialog2.color);
    if (Linien[9].sehbar and Linien[5].sehbar) then Farbe(1,3,form2.ColorDialog3.color);
    if (Linien[12].sehbar and Linien[8].sehbar) then Farbe(6,7,form2.ColorDialog4.color);
    if (Linien[10].sehbar and Linien[7].sehbar) then Farbe(2,3,form2.ColorDialog5.color);
    if (Linien[11].sehbar and Linien[8].sehbar) then Farbe(4,5,form2.ColorDialog6.color);
  end;
  Virt_Bild.Canvas.Brush.Color:=clgray;
  if Virt_Bild.Canvas.Pixels[1,1]<>clgray then
    Virt_Bild.Canvas.FloodFill(1,1,clblack,fsborder);
end;


//--------------------------------------------Pyramide--------------------------------------------------

constructor TPyramide.init(n,h,s,f1,f2,f3:integer);
var i:integer;
    r: real;
begin
  setlength(Zeichenflaechepunkte,n+1);
  f1:=f1+c;
  r:=s/(2*sin(pi/s));
  for i:=1 to n do
    begin
      TPunkt.zufueg(round(f1 + r*cos(pi/2 + 2*i*pi/n)),round(f2 + r*sin(pi/2 + 2*i*pi/n)),f3);
    end;
  TPunkt.zufueg(f1,f2,f3+h);
  Vorfestlegungen;
  A[0].x:=f1; A[0].y:=f2; A[0].z:=f3;
  Berechnung;
end;

procedure TPyramide.Berechnung;
var i:integer;
begin
  k_mx:=A[0].x+1/4*(A[l].x-A[0].x); k_my:=A[0].y+1/4*(A[l].y-A[0].y); k_mz:=A[0].z+1/4*(A[l].z-A[0].z);
    for i:=0 to l do
      begin
        lagenberechner(A[i].x,A[i].y,A[i].z);
        Zeichenflaechepunkte[i].x:=round(kor_y(A[i].y*zoomfaktor/A[i].x));
        Zeichenflaechepunkte[i].y:=round(kor_z(A[i].z*zoomfaktor/A[i].x));
      end;
     form1.Label7.Caption:=floattostr(k_mx);  form1.Label8.Caption:=floattostr(k_my);form1.Label9.Caption:=floattostr(k_mz);
end;

procedure TPyramide.Vorfestlegungen;
var i:integer;
begin
  index:=0;
  for i:=1 to l-2 do
    begin
      Linienpunktzufueg(i,i+1); Linienpunktzufueg(i,l);
    end;
  Linienpunktzufueg(l-1,1); Linienpunktzufueg(l-1,l);
end;

procedure TPyramide.zeichnen;
var i, Faerbung,r,g,bl:integer;
    b:boolean;
begin
  for i:=1 to index do Linien[i].sehbar:=false;
  for i:=1 to (index div 2)-1 do
      if (TPunkt.sichtbar(i*2,i*2+2)) then linien[i*2-1].sehbar:=true;
  if TPunkt.sichtbar(2,index) then linien[index-1].sehbar:=true;
  if (((index div 2) mod 2) =0) then                                             //Berechnung ob Grundfläche von Körpern gerader Grundflächeneckenanzahl sichtbar ist
      if (sichtbar(1,(index div 2)+1) and sichtbar(1,(index div 2)-1)) then
        for i:=1 to (index div 2) do linien[i*2-1].sehbar:=true;
  if (((index div 2) mod 2) =1) then                                            //Berechnung ob Grundfläche von Körpern ungerader Grundflächeneckenanzahl sichtbar ist
      if ((sichtbar(1,(index div 2)) and sichtbar(1,(index div 2)+2))) then
        for i:=1 to (index div 2) do linien[i*2-1].sehbar:=true;
  for i:=1 to index do
    if Linien[i].sehbar then TPunkt.zeichne_Linie(Linien[i]);
  if form2.CheckBox2.Checked=true then begin
    if form2.ComboBox2.ItemIndex=0 then begin
      for i:=1 to (index div 2) do if ((Linien[i*2-1].sehbar) and(Linien[i*2].sehbar) and (Linien[i*2+2].sehbar)) then
        begin
          Faerbung:=(510 div index)*i;                                            //für schöneren, weicheren Farbübergang
          if form2.Edit13.Text='v' then r:=Faerbung
            else try r:=strtoint(form2.Edit13.Text); except; end;
          if form2.Edit14.Text='v' then g:=Faerbung
            else try g:=strtoint(form2.Edit14.Text); except; end;
          if form2.Edit15.Text='v' then bl:=Faerbung
            else try bl:=strtoint(form2.Edit15.Text); except; end;
          try
            Farbe(i*2-1,i*2,RGB(r,g,bl)); except; end; //Mantelflächen einfärben
        end;
      end;
    if form2.ComboBox2.ItemIndex=1 then begin
      for i:=1 to (index div 2) do if ((Linien[i*2-1].sehbar) and(Linien[i*2].sehbar) and (Linien[i*2+2].sehbar)) then
        begin
          Faerbung:=(1020 div index)*i;                                            //für schöneren, weicheren Farbübergang
          if Faerbung>255 then Faerbung:=255-(Faerbung-255);
          if form2.Edit13.Text='v' then r:=Faerbung
            else try r:=strtoint(form2.Edit13.Text); except; end;
          if form2.Edit14.Text='v' then g:=Faerbung
            else try g:=strtoint(form2.Edit14.Text); except; end;
          if form2.Edit15.Text='v' then bl:=Faerbung
            else try bl:=strtoint(form2.Edit15.Text); except; end;
          try
            Farbe(i*2-1,i*2,RGB(r,g,bl)); except; end; //Mantelflächen einfärben
        end;
      end;
    if (((index div 2) mod 2) =0) then                                                                                                     //Grundfläche färben
      begin
        if (sichtbar(1,(index div 2)+1) and sichtbar(1,(index div 2)-1)) then Farbe(1,(index div 2)+1,form2.ColorDialog6.color);
      end;
    if (((index div 2) mod 2) =1) then
      begin
       if ((sichtbar(1,(index div 2)) and sichtbar(1,(index div 2)+2))) then Farbe(1,(index div 2),form2.ColorDialog6.color);
      end;
  end;
  Virt_Bild.Canvas.Brush.Color:=clgray;
  if form2.CheckBox1.Checked=true then begin
    for i:=1 to index do
      if Linien[i].sehbar=false then TPunkt.zeichne_Linie(Linien[i]);
    for i:=1 to index do
      if Linien[i].sehbar then TPunkt.zeichne_Linie(Linien[i]);
  end;
  if Virt_Bild.Canvas.Pixels[1,1]<>clgray then
    Virt_Bild.Canvas.FloodFill(1,1,clblack,fsborder);
end;





//####################################################################################################
//- - - - - - - - - - - - - - - - - - - - - allgemeine Dinge - - - - - - - - - - - - - - - - - - - - -
//####################################################################################################

function kor_y(y: real):real;                             //siehe kor_z
  begin
    kor_y:=(Virt_Bild.Width div 2)-y*strtofloat(form1.Edit1.Text)/strtofloat(form1.Edit2.Text);
  end;

function kor_z(z: real):real;                             //rechnet die z-Koordinate so um, dass sie auf der Paintbox ausgegeben werden kann(vom Koordinatensystem mit Ursprunhg in der Mitte zum Koordinatensystem mit Ursprung links oben, usw.)
  begin
    kor_z:=(Virt_Bild.Height div 2)-z*strtofloat(form1.Edit1.Text)/strtofloat(form1.Edit2.Text);
  end;

procedure setze(P:TPoint);                         //setzt den Cursor
  begin
  Virt_Bild.Canvas.MoveTo(P.x, P.y);  //rechnet 3D in 2D um (mittels geteilt durch x)
  end;

procedure malzu(P:TPoint);                         //malt zu dem Punkt
  begin
  Virt_Bild.Canvas.lineto(P.x, P.y);
  Virt_Bild.Canvas.Pixels[P.x, P.y]:=clblack;
  end;

procedure TForm1.koordinatensys;                     //malt Koordinatensystem
  begin
    Virt_Bild.Canvas.Pen.Style:=psSolid;
    Virt_Bild.Canvas.MoveTo(0, Virt_Bild.Height div 2);
    Virt_Bild.Canvas.lineto(Virt_Bild.width, Virt_Bild.Height div 2);
    Virt_Bild.Canvas.MoveTo(Virt_Bild.width div 2, 0);
    Virt_Bild.Canvas.lineto(Virt_Bild.width div 2, Virt_Bild.Height);
  end;

procedure machjetz;
begin
  virt_bild.Canvas.FillRect(rect(0,0,Virt_Bild.width,Virt_Bild.height));
  case Form2.ComboBox1.ItemIndex of
   0: with Quader do begin
       if Quader.l=0 then init(strtoint(unit2.Form2.Edit1.text),strtoint(unit2.Form2.Edit2.text),strtoint(unit2.Form2.Edit3.text),strtoint(unit2.Form2.Edit4.text),strtoint(unit2.Form2.Edit5.text),strtoint(unit2.Form2.Edit6.text));
       Berechnung;
       zeichnen;
      end;
   1: with Pyramide do begin
       if Pyramide.l=0 then init(strtoint(unit2.Form2.Edit1.text),strtoint(unit2.Form2.Edit2.text),strtoint(unit2.Form2.Edit3.text),strtoint(unit2.Form2.Edit4.text),strtoint(unit2.Form2.Edit5.text),strtoint(unit2.Form2.Edit6.text));
       Berechnung;
       zeichnen;
      end;
  end;
  Form1.koordinatensys;
  form1.PaintBox1.Canvas.CopyRect(rect(0,0,form1.PaintBox1.Width,form1.PaintBox1.Height),Virt_Bild.Canvas,rect(500,500,Virt_Bild.Width-500,Virt_Bild.Height-500));
end;

procedure TForm1.Button1Click(Sender: TObject);
  begin
    koordinatensys;
    alpha:=0; beta:=0; gamma:=0;
    machjetz;
  end;

procedure TForm1.Button2Click(Sender: TObject);
  var i:integer;
  begin
    alpha:=0;
    beta:=0;
    gamma:=1/180*3.14159265;
    for i:=1 to 360 do
      begin
        machjetz;
        sleep(0);
      end;
    beta:=0;
    gamma:=0;
    alpha:=1/180*3.14159265;
    for i:=1 to 360 do
      begin
        machjetz;
        sleep(0);
      end;
    alpha:=0;
    gamma:=0;
    beta:=1/180*3.14159265;
    for i:=1 to 360 do
      begin
        machjetz;
        sleep(0);
      end;
  end;

procedure TForm1.PaintBox1MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  maushoch:=false;
end;

procedure TForm1.PaintBox1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  maushoch:=true;
end;

procedure TForm1.PaintBox1MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
var i,  t:tpoint;
    test: array of TPoint;
begin
    if maushoch =true then
    begin
      xa:=xa-x; ya:=ya-y;
      if radiogroup2.ItemIndex=0 then
      begin
        gamma:=0; beta:=0; alpha:=0.5*(ya)/180*3.14159265; machjetz;
      end;
      if radiogroup2.ItemIndex=1 then
      begin
        alpha:=0; gamma:=0; beta:=0.5*(xa)/180*3.14159265; machjetz;
      end;
      if radiogroup2.ItemIndex=2 then
      begin
        alpha:=0; beta:=0; gamma:=0.5*(xa+ya)/180*3.14159265; machjetz;
      end;
      if radiogroup2.ItemIndex=3 then
      begin
        alpha:=0;
        beta:=0;
        gamma:=0;
        if (0<>abs(ya)) then alpha:=0.5*ya/180*3.14159265;
        if (0<>abs(xa)) then beta:=-0.5*xa/180*3.14159265;
        if (ya<>0)or(xa<>0) then
        begin
          machjetz;
        end;
      end;
    end;
    xa:=x; ya:=y;
    label3.Caption:=inttostr(x);
    label4.Caption:=inttostr(y);
    setlength(Test,4);
    Test[0]:=point(0,0); Test[1]:=point(100,0); Test[2]:=point(100,100); Test[3]:=point(0,100);
    if Punkt_in_Polygon.inside(Test,point(x,y)) then label6.Caption:='true'
      else label6.Caption:='false';
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  maushoch:=false; c:=500;
  beta:=0; alpha:=0; gamma:=0; keypreview:=true;
  Virt_Bild:=TBitmap.Create;
  paintbox1.Left:=0; paintbox1.Top:=0; paintbox1.height:=form1.ClientHeight;
  paintbox1.Width:=form1.ClientWidth-200;
  Virt_Bild.Height:=paintbox1.Height+1000;
  Virt_Bild.Width:=paintbox1.Width+1000;
  Virt_Bild.canvas.Brush.Color:=clgray;
  virt_bild.Canvas.FillRect(rect(0,0,Virt_Bild.width,Virt_Bild.height));
  koordinatensys;
  Button1.Left:=paintbox1.Width; Button2.Left:=paintbox1.Width+button1.width;
  Button3.Left:=Button2.Left+button2.Width;
  label1.Left:=paintbox1.Width+30; Edit1.Left:=paintbox1.Width+60;
  label2.Left:=Edit1.Left+edit1.Width; Edit2.left:=label2.left+label2.width;
  label3.Top:=paintbox1.Height-50; label3.Left:=paintbox1.Width+10;
  label5.Top:=label3.Top; label5.Left:=label3.Left+30;
  label4.Top:=label3.Top; label4.Left:=label5.Left+10;
  groupbox1.Left:=button1.Left+20;
end;

procedure TForm1.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  alpha:=0; beta:=0; gamma:=0;
  if key=vk_up then begin
    c:=c-strtoint(form2.edit7.text);
    if form2.ComboBox1.ItemIndex=0 then Quader.Verschieben(-strtoint(form2.edit7.text),1);
    if form2.ComboBox1.ItemIndex=1 then Pyramide.Verschieben(-strtoint(form2.edit7.text),1);
    machjetz;
  end;
  if key=vk_down then begin
    c:=c+strtoint(form2.edit8.text);
    if form2.ComboBox1.ItemIndex=0 then Quader.Verschieben(strtoint(form2.edit8.text),1);
    if form2.ComboBox1.ItemIndex=1 then Pyramide.Verschieben(strtoint(form2.edit8.text),1);
    machjetz;
  end;
  if key=vk_right then begin
    if form2.ComboBox1.ItemIndex=0 then Quader.Verschieben(-strtoint(form2.edit9.text),2);
    if form2.ComboBox1.ItemIndex=1 then Pyramide.Verschieben(-strtoint(form2.edit9.text),2);
    machjetz;
  end;
  if key=vk_left then begin
    if form2.ComboBox1.ItemIndex=0 then Quader.Verschieben(strtoint(form2.edit10.text),2);
    if form2.ComboBox1.ItemIndex=1 then Pyramide.Verschieben(strtoint(form2.edit10.text),2);
    machjetz;
  end;
  if key=vk_prior then begin
    if form2.ComboBox1.ItemIndex=0 then Quader.Verschieben(strtoint(form2.edit11.text),3);
    if form2.ComboBox1.ItemIndex=1 then Pyramide.Verschieben(strtoint(form2.edit11.text),3);
    machjetz;
  end;
  if key=vk_next then begin
    if form2.ComboBox1.ItemIndex=0 then Quader.Verschieben(-strtoint(form2.edit12.text),3);
    if form2.ComboBox1.ItemIndex=1 then Pyramide.Verschieben(-strtoint(form2.edit12.text),3);
    machjetz;
  end;
end;

procedure TForm1.FormPaint(Sender: TObject);
begin
  form1.PaintBox1.Canvas.CopyRect(rect(0,0,form1.PaintBox1.Width,form1.PaintBox1.Height),Virt_Bild.Canvas,rect(500,500,Virt_Bild.Width-500,Virt_Bild.Height-500));
end;

procedure TForm1.Button3Click(Sender: TObject);
begin
  alpha:=0; beta:=0; gamma:=0; Quader.Laenge_Nullsetzen; Pyramide.Laenge_Nullsetzen; machjetz;
end;

procedure TForm1.vkbdfv1Click(Sender: TObject);
begin
  unit2.form2.Show;
end;

procedure TForm1.Hilfe1Click(Sender: TObject);
begin
  Form3.show;
end;

end.

